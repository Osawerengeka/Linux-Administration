Задание:
Выполните указанные ниже действия и запишите все использовавшиеся команды с параметрами и изменения в файлах в отдельный файл:

1. Установите из сетевого репозитория пакеты, входящие в группу «Developments Tools».

dnf group install "Development Tools"

2. Установите из исходных кодов, приложенных к методическим указаниям пакет bastet-0.43. Для этого необходимо создать отдельный каталог и скопировать в него исходные коды проекта bastet. Вы можете использовать подключение сетевого каталога в хостовой операционной системе для передачи архива с исходными кодами в виртуальную машину. Далее следует распаковать архив до появления каталога с исходными файлами (в каталоге должен отображаться Makefile). После этого соберите пакет bastet и запустите его, чтобы удостовериться, что он правильно собрался. Затем модифицируйте Makefile, добавив в него раздел install. Обеспечьте при установке копирование исполняемого файла в
/usr/bin с установкой соответствующих прав доступа. Выполните установку и проверьте, что любой пользователь может запустить установленный пакет.

mkdir ~/Builds
tar zxvf ~/Downloads/bastet-0.43.tgz -C ~/Builds
cd ~/Builds/bastet-0.43
yum install boost boost-devel
yum install ncurses-devel ncurses
make
cp bastet /usr/local/bin
chgrp games /usr/local/bin/bastet
chmod g+s /usr/local/bin/bastet
touch /var/games/bastet.scores2
chgrp games /var/games/bastet.scores2
chmod 664 /var/games/bastet.scores2
echo "install:" >> ~/Builds/bastet-0.43/Makefile
echo "	install -m 755 ~/Builds/bastet-0.43/bastet /usr/local/bin" >> ~/Builds/bastet-0.43/Makefile
#login as user via GUI or cmd and check if bastet run

3. Создайте файл task3.log, в который выведите список всех установленных пакетов.

rpm -qa >> ~/task3.log

4. Создайте файл task4_1.log, в который выведите список всех пакетов (зависимостей), необходимых для установки и работы компилятора gcc. Создайте файл task4_2.log, в который выведите список всех пакетов (зависимостей), установка которых требует установленного пакета libgcc.

rpm -q --whatrequires gcc >> ~/task4_1.log
yum whatprovides libgcc >> ~/task4_2.log

5. Создайте каталог localrepo в домашнем каталоге пользователя root и скопируйте в него пакет checkinstall-1.6.2-3.el6.1.x86_64.rpm , приложенный к методическим указаниям. Создайте собственный локальный репозиторий с именем localrepo из получившегося каталога с пакетом.

yum install createrepo
mkdir ~/localrepo
cp ~/Downloads/checkinstall-1.6.2-3.el6.1.x86_64.rpm ~/localrepo
createrepo ~/localrepo
echo "[localrepo]" >> /etc/yum.repos.d/LocalRepository.repo
echo "name=LocalRepository" >> /etc/yum.repos.d/LocalRepository.repo
echo "baseurl=file:///root/localrepo" >> /etc/yum.repos.d/LocalRepository.repo
echo "enabled=1" >> /etc/yum.repos.d/LocalRepository.repo
echo "gpgcheck=0" >> /etc/yum.repos.d/LocalRepository.repo


6. Создайте файл task6.log, в который выведите список всех доступных репозиториев.

yum repolist > ~/task6.log

7. Настройте систему на работу только с созданным локальным репозиторием (достаточно переименовать конфигурационные файлы других репозиториев). Выведите на экран список доступных для установки пакетов и убедитесь, что доступен только один пакет, находящийся в локальном репозитории. Установите этот пакет.

yum install yum-utils
yum-config-manager --disable \*
yum-config-manager --enable localrepo
yum list available
yum list available > ~/task7.log
yum install checkinstall

8. Скопируйте в домашний каталог пакет fortunes-ru_1.52-2_all, приложенный к методическим рекомендациям, преобразуйте его в rpm пакет и установите.

yum-config-manager --enable 
cd ~/Downloads/
wget -c https://sourceforge.net/projects/alien-pkg-convert/files/release/alien_8.95.tar.xz
tar xf alien_8.95.tar.xz
dnf install perl
cd alien_8.95
perl Makefile.PL
make
make install

cd ~/Downloads
alien --to-rpm fortunes-ru_1.52-2_all.deb
mv fortunes-ru-1.52-3.noarch.rpm fortunes-ru-1.52-3.rpm
rpm -ivh fortunes-ru-1.52-3.rpm

9. Скачайте из сетевого репозитория пакет nano. Пересоберите пакет таким образом, чтобы после его установки менеджером пакетов, появлялась возможность запустить редактор nano из любого каталога, введя команду newnano.

dnf install https://extras.getpagespeed.com/release-el8-latest.rpm
dnf install rpmrebuild
cd ~/Downloads
dnf download nano
#set nano as default text editor
nano ~/.bashrc
source .bashrc
rpmrebuild -enp nano-2.9.8-1.el8.x86_64.rpm
mv /usr/bin/nano /usr/bin/newnano




10. Установите интерпритатор python3
# dnf update -y
# dnf install python3 -y
python3 для проверки








